----------------------------------------------------------------------------------------------------------------------------
kubectl exec -it redis-cluster-0 -- redis-cli --cluster create $(kubectl get pods -l app=redis-cluster -o jsonpath='{range.items[*]}{.status.podIP}:6379 ')
swith 3 fisrt master 	3 behind slave
----------------------------------------------------------------------------------------------------------------------------
for x in $(seq 0 5); do echo "redis-cluster-$x"; kubectl exec redis-cluster-$x -- redis-cli role; echo; done
check master and slave
----------------------------------------------------------------------------------------------------------------------------
kube State Metrics Prometheus Config
This configuration can be added as part of prometheus job configuration.
You need to add the following job configuration to your prometheus config for prometheus to scrape all the kube state metrics
config file: 
- job_name: 'kube-state-metrics'
  static_configs:
    - targets: ['kube-state-metrics.kube-system.svc.cluster.local:8080']
----------------------------------------------------------------------------------------------------------------------------
Prometheus
kubectl port-forward <POD> portExpose:portNode -n monitoring
----------------------------------------------------------------------------------------------------------------------------
kubectl exec -it grafana-pod-id -n grafana -- grafana-cli plugins install <plugin-id>
----------------------------------------------------------------------------------------------------------------------------
kubectl exec -it [POD_NAME] -c [CONTAINER_NAME] -- /bin/sh -c "kill 1"
----------------------------------------------------------------------------------------------------------------------------
kubectl exec -it [POD_NAME] -c [CONTAINER_NAME] -- [command]


----------------------------------------------------------------------------------------------------------------------------
cd certs \
kubectl create secret generic nats-tls-example --from-file=ca.pem --from-file=server-key.pem --from-file=server.pem \
kubectl create secret generic nats-tls-routes-example --from-file=ca.pem --from-file=route-key.pem --from-file=route.pem \
kubectl create secret generic nats-tls-client-example --from-file=ca.pem --from-file=client-key.pem --from-file=client.pem


----------------------------------------------------------------------------------------------------------------------------
#!/bin/bash
kubectl create configmap nats-config --from-file nats.conf
openssl genrsa -out ca-key.pem 2048
openssl req -x509 -new -nodes -key ca-key.pem -days 10000 -out ca.pem -subj "/CN=kube-ca"
openssl genrsa -out nats-key.pem 2048
openssl req -new -key nats-key.pem -out nats.csr -subj "/CN=kube-nats" -config ssl.cnf
openssl x509 -req -in nats.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out nats.pem -days 3650 -extensions v3_req -extfile ssl.cnf
kubectl create secret generic tls-nats-server --from-file nats.pem --from-file nats-key.pem --from-file ca.pem
kubectl create secret generic tls-nats-client --from-file ca.pem
kubectl create -f nats.yml




